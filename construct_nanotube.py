#!/usr/bin/env python
# copyright, Changming Yue, yuechangming8@gmail.com
import numpy as np
Amat_prim=np.zeros((3,3),dtype=np.float64)
Amat_conv=np.zeros((3,3),dtype=np.float64)
atoms_labelprim=[]

super_cell = np.zeros((3,3),dtype=np.int32)
with open("supercell.in","r") as rd:
   fl=rd.readline()[:-1]
   print "input file ", fl
   for i in range(3): 
      ai1,ai2,ai3 = rd.readline().strip().split()
      super_cell[i,:] = [int(ai1),int(ai2),int(ai3)] 
   kk, = rd.readline().strip().split()
   kk=float(kk)
   shift_z, = rd.readline().strip().split(); shift_z=float(shift_z)

with open(fl,"r") as rd:
   line1=rd.readline()
   line2=rd.readline()
   a11,a21,a31 = rd.readline().strip().split()
   a12,a22,a32 = rd.readline().strip().split()
   a13,a23,a33 = rd.readline().strip().split()
   Amat_prim[:,0] = [np.float64(a11), np.float64(a21), np.float64(a31)]
   Amat_prim[:,1] = [np.float64(a12), np.float64(a22), np.float64(a32)]
   Amat_prim[:,2] = [np.float64(a13), np.float64(a23), np.float64(a33)]

   line6=rd.readline()
   eles = line6.strip().split()
   line7=rd.readline()
   natms=line7.strip().split()
   natom_prim=0
   for i in range(len(eles)): natom_prim = natom_prim + int(natms[i])

   atoms_fracprim=np.zeros((3,natom_prim),np.float64)
   atoms_prim_cart=np.zeros((3,natom_prim),np.float64)
   for i in range(len(eles)): 
       natom = int(natms[i]) 
       for j in range(natom): atoms_labelprim.append(eles[i])
   line9=rd.readline()
   for i in range(natom_prim):
      f1,f2,f3 = rd.readline().strip().split()
      atoms_fracprim[0,i] = np.float64(f1)
      atoms_fracprim[1,i] = np.float64(f2)
      atoms_fracprim[2,i] = np.float64(f3)
Amat_conv[:,0] = super_cell[0,0]*Amat_prim[:,0]+ super_cell[0,1]*Amat_prim[:,1]+ super_cell[0,2]*Amat_prim[:,2]
Amat_conv[:,1] = super_cell[1,0]*Amat_prim[:,0]+ super_cell[1,1]*Amat_prim[:,1]+ super_cell[1,2]*Amat_prim[:,2]
Amat_conv[:,2] = super_cell[2,0]*Amat_prim[:,0]+ super_cell[2,1]*Amat_prim[:,1]+ super_cell[2,2]*Amat_prim[:,2]
vol_ratio = int(np.dot(np.cross(Amat_conv[:,0],Amat_conv[:,1]),Amat_conv[:,2])/ np.dot(np.cross(Amat_prim[:,0],Amat_prim[:,1]),Amat_prim[:,2]))

natom_conv = vol_ratio * natom_prim
print "volume of supercell versus unitcell ", vol_ratio
atoms_fracconv=np.zeros((3,natom_conv),np.float64)
atoms_cartconv=np.zeros((3,natom_conv),np.float64)
print "Amat_prim\n", Amat_prim.T
print "Amat_super\n", Amat_conv.T
print "natom_super", natom_conv
#print "rotc2p\n", np.dot(np.linalg.inv(Amat_prim),Amat_conv)

# fractional axis in terms of primitive cell basis, of the atoms of WS supercell[000], 
eps=1.0E-4
sdim=int(max(np.linalg.norm(super_cell[0,:]),np.linalg.norm(super_cell[1,:]))) + 10

# find all the atoms in the convcell
idx=0
invAmatconv = np.linalg.inv(Amat_conv)
for iatom in range(natom_prim):
   for ix in range(-sdim,sdim+1):
     for iy in range(-sdim,sdim+1):
       for iz in range(1):
	  rpt = np.array([ix,iy,iz],np.float64)
	  vec = rpt + atoms_fracprim[:,iatom]
	  cart = np.dot(Amat_prim, vec)
	  frac_in_conv = np.dot(invAmatconv,cart)
	  x=frac_in_conv[0]
	  y=frac_in_conv[1]
	  z=frac_in_conv[2]
 	  if (x>0.0-eps and x<1.0-eps) and (y>0.0-eps and y<1.0-eps) and (z>0.0-eps and z<1.0-eps): 
              atoms_fracconv[:,idx] = frac_in_conv
              atoms_cartconv[:,idx] = cart
              idx = idx+1

invAmat_prim = np.linalg.inv(Amat_prim)
atoms_labelconv=[]
fl=open("nanosheet.vasp","w") 
print >>fl,line1[:-1]
print >>fl,line2[:-1]
for i in range(3):
    line="{:12.6f}{:12.6f}{:12.6f}".format(Amat_conv[0,i],Amat_conv[1,i],Amat_conv[2,i])
    print >>fl,line
print >>fl,line6[:-1]
for i in range(len(eles)): 
    if i< len(eles)-1: print >> fl, int(natms[i])*vol_ratio,
    if i==len(eles)-1: print >> fl, int(natms[i])*vol_ratio
print >>fl, line9[:-1]
for iatom in range(natom_conv):
    a = np.dot(Amat_conv,atoms_fracconv[:,iatom])
    b = np.dot(invAmat_prim,a) 
    # find mapping
    for ii in range(natom_prim):
        lthis = True
        for jj in range(3):
            t = (b[jj]-atoms_fracprim[jj,ii])
            if abs(t-round(t))>1.0E-6: lthis = False
        if lthis == True: 
            jatom = ii
	    atoms_labelconv.append(atoms_labelprim[jatom])
            break
    tmp = atoms_fracconv[:,iatom]
    line="{:12.6f}{:12.6f}{:12.6f}{:s}".format(tmp[0],tmp[1],tmp[2],"   "+atoms_labelconv[-1])
    print >>fl, line
fl.close()

print "We role the sheet along the direction", Amat_conv[:,0], ", where the Central axis of the tube is // to ", Amat_conv[:,1]
# we suppose b is perp to a, and roll along b : L//b; we suppose to role along 
R = np.linalg.norm(Amat_conv[:,0])/(2.0*np.pi)
fl=open("nanotube.xyz","w")
print >>fl, natom_conv
print>>fl, "nanotube generated by changming.yue"
Amat_conv[:,0] = [np.linalg.norm(Amat_conv[:,0]),0.0,0.0]
Amat_conv[:,1] = [0.0,np.linalg.norm(Amat_conv[:,1]),0.0]
for iatom in range(natom_conv):
    tmp = np.dot(Amat_conv,atoms_fracconv[:,iatom])
    x = tmp[0]; y = tmp[1]; z = tmp[2]
    z = z + shift_z 
    if z > Amat_conv[2,2]  : z = z - Amat_conv[2,2]
    xnew = (R + kk*z) * np.cos(-kk*(x/R))
    ynew = (R + kk*z) * np.sin(-kk*(x/R))
    znew = -y
    line="{:s}{:12.6f}{:12.6f}{:12.6f}".format("   "+atoms_labelconv[iatom],xnew,ynew,znew)
    print >>fl, line
fl.close()
